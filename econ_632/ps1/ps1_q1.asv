% Set up a 2 by 2 matrix containing upper and lower bounds for the
% overflow and underflow values, respectively (the first row will be used
% to pin down the overflow, the second to pin down the underflow value)
bounds = ones(2,2);

% Set an adjustment parameter
alpha = 1.2;

% Increase the upper bound on the overflow value until machine precision
% isn't perfect anymore
while log(exp(bounds(1,2))) == bounds(1,2)
    bounds(1,2) = bounds(1,2) * alpha;
end

% Decrease the lower bound on the underflow value until machine precision
% isn't perfect anymore
while log(exp(bounds(2,2))) == bounds(2,2)
    bounds(2,2) = bounds(2,2) / alpha;
end

% Set up indicators for whether overflow and underflow numbers have
% converged
conv = zeros(2,1);
coflw = 0;  % overflow convergence indicator
cuflw = 0;  % underflow convergence indicator

while conv(1,1) * conv(2,1) == 0
    for i=1:2
        if conv(i,1) == 0
            % Calculate midpoint between upper and lower overflow bound
            mp = (bounds(i,2) - bounds(i,1)) / 2;
            
            % Adjust bounds accordingly
            if log(exp(mp)) == mp
                % If the midpoint is below the overflow bound, use it as the
                % new lower bound
                bounds(i,3-i) = mp;
            else
                % Otherwise, use it as the new upper bound
                bounds(i,3-i) = mp;
            end

            % If overflow bounds are within tolerance, set convergence
            % indicator to 1
            if bounds(1,2) - bounds(1,1) <= tol
                coflw = 1;
            end
        end
    end
    
    % Check whether overflow bound has converged
    if coflw == 0
        % Calculate midpoint between upper and lower overflow bound
        mp = (bounds(1,2) - bounds(1,1)) / 2;
        
        % Adjust bounds accordingly
        if log(exp(mp)) == mp
            % If the midpoint is below the overflow bound, use it as the
            % new lower bound
            bounds(1,1) = mp;
        else
            % Otherwise, use it as the new upper bound
            bounds(1,2) = mp;
        end
        
        % If overflow bounds are within tolerance, set convergence
        % indicator to 1
        if bounds(1,2) - bounds(1,1) <= tol
            coflw = 1;
        end
    end
    
    % Check whether underflow bound has converged
    if cuflw == 0
        % Calculate midpoint between upper and lower underflow bound
        mp = (bounds(2,2) - bounds(2,1)) / 2;
        
        % Adjust bounds accordingly
        if log(exp(mp)) == mp
            % If the midpoint is below the overflow bound, use it as the
            % new lower bound
            bounds(1,1) = mp;
        else
            % Otherwise, use it as the new upper bound
            bounds(1,2) = mp;
        end
        
        % If overflow bounds are within tolerance, set convergence
        % indicator to 1
        if bounds(1,2) - bounds(1,1) <= tol
            coflw = 1;
        end
    end
end